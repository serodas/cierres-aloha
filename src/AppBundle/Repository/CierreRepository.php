<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Cierre;
use AppBundle\Entity\Motivo;
use AppBundle\Entity\Terminal;

use AppBundle\Util\Ambiente;

use AppBundle\Services\mufService;

/**
 * CierreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CierreRepository extends \Doctrine\ORM\EntityRepository
{
    public function listar(){

        $em= $this->getEntityManager();
        $ccajero_repo= $em->getRepository("AppBundle:Cierre");
    
        return $ccajeros = $ccajero_repo->createQueryBuilder('c')
            ->select('c.fecha','c.id','p.descripcion','c.usuario','c.ventregado','m.descripcion as motivo')
            ->innerJoin('c.punto','p')
            ->innerJoin('c.motivo','m')
            ->orderBy('c.id')
            ->getQuery()
            ->getResult();
        }

    public function autorizaCierre($cierre_id,$login,$observacion = null){
        $em= $this->getEntityManager();
        $ccajero_repo= $em->getRepository("AppBundle:Cierre");
        $ccajero = $ccajero_repo->find($cierre_id);

        $motivo= $em->getRepository("AppBundle:Motivo")->findOneByCodigo(Ambiente::AUTORIZADO);
        
        $ccajero->setUserAuditoria($login);
        $ccajero->setMotivo($motivo);

        //********************************** */
        $observacionActualEnCierres = $ccajero->getObservacion() ;
        $saltoLinea = empty($observacionActualEnCierres) ? "" : "<br>";
        $observacionNueva = $observacion . ".Caja autorizada el dÃ­a: " . $ccajero->getFecha() . " por " . $login;
        $observacionNueva .= "- Valor entregado anterior fue de: $". $ccajero->getDigitado();
        $observacionNueva .= "- Diferencia anterior fue de: $". $ccajero->getDiferencia();
        $observacionNueva .= $saltoLinea . $observacionActualEnCierres;
        $ccajero->setObservacion($observacionNueva);
        //********************************** */

        $ccajero->setUpdatedAt( new \Datetime('now', new \DateTimezone('America/Lima')));
        $em->persist($ccajero);
        $flush = $em->flush();

        if($flush == null)
        {
            return true;
        }else
        {
            return false;
        }
    }

    public function inactivaCierre($cierre_id,$observacion,$login)
    {
        $em= $this->getEntityManager();
        $ccajero_repo= $em->getRepository("AppBundle:Cierre");
        $ccajero = $ccajero_repo->find($cierre_id);

        $motivo= $em->getRepository("AppBundle:Motivo")->findOneByCodigo(Ambiente::INACTIVO);
        
        $ccajero->setuserAuditoria($login);
        $ccajero->setMotivo($motivo);
        $ccajero->setObservacion($observacion);
        $ccajero->setUpdatedAt( new \Datetime('now', new \DateTimezone('America/Lima')));
        $em->persist($ccajero);
        $flush = $em->flush();

        if($flush == null)
        {
            return true;
        }else
        {
            return false;
        }
    }
    
    public function validarCierre($fecha,$punto,$login)
    {
        $em = $this->getEntityManager();
        $ccajero_repo= $em->getRepository("AppBundle:Cierre");

        $consulta = $ccajero_repo->createQueryBuilder('c')
            ->select('count(c.id)')
            ->where('c.fecha = :date and c.terminal = :punto and m.codigo=1 and e.nickName = :empleado' )
            ->innerJoin('c.motivo','m')
            ->innerJoin('c.empleado','e')
            ->setParameter('date',$fecha)
            ->setParameter('punto',$punto)
            ->setParameter('empleado',$login)
            ->getQuery()
            ->getSingleScalarResult();

        if( $consulta == 0)
        {
            return true;
        }else
        {
            return false;
        }    
    }

    public function obtenerPunto($codigo){
   
        $em= $this->getEntityManager();
        $terminal_repo= $em->getRepository("AppBundle:Terminal");
        $terminal = $terminal_repo->find($codigo);

        return $terminal->getName();
  
    }

    public function getEfectivoReal($date,$empleado,$punto)
    {
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT SUM(AMOUNT)
        FROM [dbInventario].[dbo].[tblGndSale]
        WHERE dob= :fecha AND EMPLOYEE= :empleado AND  [check]/10000 = :punto  AND TYPE='4' AND TYPEID='1' ";
    

        $stmt = $em->prepare($query);

        $params = array(
            "fecha"=>$date,
            "empleado"=>$empleado,
            "punto" => $punto
        );

        $stmt->execute($params);
        $result = $stmt->fetch();

        foreach( $result as $resultado){
            if($resultado != null){
                $valor = $resultado;
            }else{
                $valor = 0;
            }
        }
        return $valor;
    }


    public function ReporteDetalleFormadePagoEfectivo($fecha,$centroAtencion)
    {   
        $reporteFormaPagoEfectivo = $this->getEfectivoByCentroAtencionAndFecha($fecha,$centroAtencion);
        $indice = 0;
        $numeroPaginas = 1;
    
        $valores = array();
        foreach($reporteFormaPagoEfectivo as $registro){

            $valores[$numeroPaginas][$indice] = $registro;

            $indice++;
            if ($indice % 15 == 0) {
                $numeroPaginas++;
            }
            
        }

        return $valores;
    }

    public function ReporteDetalleFormadePagoEfectivoRecepciones($fecha)
    {   
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT B.name_user,B.documento,C.Name,
        SUM(A.amount)  AS real ,
        B.digitado,B.diferencia,
		B.terminal_id AS terminal,
		A.EMPLOYEE, B.observacion
        FROM dbInventario.dbo.tblGndSale AS A
        LEFT  JOIN dbInventario.dbo.cierres B ON (B.empleado_id = A.EMPLOYEE  AND B.fecha = A.dob AND B.terminal_id in (8,12)AND B.motivo_id=1)
        LEFT  JOIN dbInventario.dbo.tblTrm C ON ( C.Id = B.terminal_id )
        WHERE  A.TYPE=:tipo AND A.TYPEID=:typeid  AND A.DOB=:fecha AND B.terminal_id in (8,12)
        GROUP BY B.name_user,B.documento,C.Name,B.digitado,B.diferencia,B.terminal_id,A.EMPLOYEE,B.observacion
        ORDER BY C.Name
        ";

            $stmt = $em->prepare($query);

            $params = array(
                "fecha"=>$fecha,
                "tipo" => 4,
                "typeid"=>1
            );

            $stmt->execute($params);
            return  $result = $stmt->fetchAll();    
    }

    public function ReporteDetalleFormaDePagoNoEfectivas($fecha,$centroAtencion)
    {   
        $em = $this->getEntityManager()->getConnection();

        if($centroAtencion == '1'){
            $query = "SELECT A.EMPLOYEE,(C.FIRSTNAME + ' ' + C.LASTNAME) AS CAJERO,A.TYPEID,B.ID AS TERMINAL,B.Name,E.descripcion,SUM(A.amount) AS total FROM dbInventario.dbo.tblGndSale AS A INNER JOIN dbInventario.dbo.tblTrm B ON ( B.Id = round(A.[CHECK]*0.0001,0)) INNER JOIN dbInventario.dbo.tblEmpleados  C ON (C.Id = A.EMPLOYEE) INNER JOIN dbInventario.dbo.tblParametrizacionContable  E ON (E.formaPagoId = A.TypeId) WHERE A.dob= :fecha AND A.TYPE=4 AND B.ID not in(:cafeteriaCentro, :cafeteriaDosquebradas) AND A.TYPEID NOT IN (1) GROUP BY A.EMPLOYEE,C.FIRSTNAME,C.LASTNAME,B.Name,E.descripcion,A.TYPEID,E.FORMAPAGOID,B.ID ORDER BY C.FIRSTNAME";
            
            $params = array(
                "fecha"=>$fecha,
                "cafeteriaCentro"=> Ambiente::CAFETERIACENTRO,
                "cafeteriaDosquebradas"=> Ambiente::CAFETERIADOSQUEBRADAS
            );
        }elseif($centroAtencion == '2'){
            $query = "SELECT A.EMPLOYEE,(C.FIRSTNAME + ' ' + C.LASTNAME) AS CAJERO,A.TYPEID,B.ID AS TERMINAL,B.Name,E.descripcion,SUM(A.amount) AS total FROM dbInventario.dbo.tblGndSale AS A INNER JOIN dbInventario.dbo.tblTrm B ON ( B.Id = round(A.[CHECK]*0.0001,0)) INNER JOIN dbInventario.dbo.tblEmpleados  C ON (C.Id = A.EMPLOYEE) INNER JOIN dbInventario.dbo.tblParametrizacionContable  E ON (E.formaPagoId = A.TypeId) WHERE A.dob= :fecha AND A.TYPE=4 AND B.ID = :cafeteriaCentro AND A.TYPEID NOT IN (1) GROUP BY A.EMPLOYEE,C.FIRSTNAME,C.LASTNAME,B.Name,E.descripcion,A.TYPEID,E.FORMAPAGOID,B.ID ORDER BY C.FIRSTNAME";
            
            $params = array(
                "fecha"=>$fecha,
                "cafeteriaCentro"=> Ambiente::CAFETERIACENTRO
            );
        }else{
            $query = "SELECT A.EMPLOYEE,(C.FIRSTNAME + ' ' + C.LASTNAME) AS CAJERO,A.TYPEID,B.ID AS TERMINAL,B.Name,E.descripcion,SUM(A.amount) AS total FROM dbInventario.dbo.tblGndSale AS A INNER JOIN dbInventario.dbo.tblTrm B ON ( B.Id = round(A.[CHECK]*0.0001,0)) INNER JOIN dbInventario.dbo.tblEmpleados  C ON (C.Id = A.EMPLOYEE) INNER JOIN dbInventario.dbo.tblParametrizacionContable  E ON (E.formaPagoId = A.TypeId) WHERE A.dob= :fecha AND A.TYPE=4 AND B.ID = :cafeteriaDosquebradas AND A.TYPEID NOT IN (1) GROUP BY A.EMPLOYEE,C.FIRSTNAME,C.LASTNAME,B.Name,E.descripcion,A.TYPEID,E.FORMAPAGOID,B.ID ORDER BY C.FIRSTNAME";
            
            $params = array(
                "fecha"=>$fecha,
                "cafeteriaDosquebradas"=> Ambiente::CAFETERIADOSQUEBRADAS
            );
        }
            $stmt = $em->prepare($query);
            $stmt->execute($params);
            $resultados = $stmt->fetchAll(); 

            $indice = 0;
            $numeroPaginas = 1;
        
            $valores = array();
            foreach($resultados as $resultado){
        
                $vouchers = $this->getVouchersByEmpleado($resultado['EMPLOYEE'],$resultado['TERMINAL'],$resultado["TYPEID"],$fecha);

                $registro = array(
                    "datos" => $resultado,
                    "voucher" => trim($vouchers["vouchers"],','),
                    "cantidad" => $vouchers["cantidad"]
                );

                $indice++;
                if ($indice % 15 == 0) {
                    $numeroPaginas++;
                }

                $valores[$numeroPaginas][$indice] = $registro;
              
            }

           return $valores;
    }

    private function getVouchersByEmpleado($empleadoID,$terminalID,$formaDePAgoID,$fecha){
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT D.TYPEID,D.AUTH
        FROM dbInventario.dbo.tblGndSale AS A
        INNER JOIN dbInventario.dbo.tblParametrizacionContable  E ON (E.formaPagoId = A.TypeId)
        INNER JOIN  dbInventario.dbo.tblGndTndr D ON ( D.DATE= A.DOB AND  D.TYPE=1  AND A.TYPEID <> 1 AND E.formaPagoId = D.TypeId AND D.EMPLOYEE = A.EMPLOYEE)
        WHERE A.dob= :fecha AND A.TYPE=4  AND A.TYPEID NOT IN (1) AND D.EMPLOYEE= :empleado_id AND D.TYPEID = :forma_pago_id  AND D.[CHECK]/10000 = :terminal_id
        GROUP BY D.TYPEID,D.AUTH";
        
        $params = array(
            "fecha"=>$fecha,
            "empleado_id"=> $empleadoID,
            "forma_pago_id"=> $formaDePAgoID,
            "terminal_id"=> $terminalID
        );

        $stmt = $em->prepare($query);

        $stmt->execute($params);
        $resultados = $stmt->fetchAll(); 

        $vouchers = '';
        $contador = 0;
        foreach($resultados as $resultado){
            $vouchers .= $resultado['AUTH']. ',';
            $contador++;
        }

        $respuesta = array(
            "vouchers" => $vouchers,
            "cantidad" => $contador
        );

        return $respuesta;
    }

    public function ReporteGeneralFormadePagoNoEfectivas($fecha,$centroAtencion)
    {   
        $em = $this->getEntityManager()->getConnection();

        if($centroAtencion == '1')
        {
            $query = "SELECT A.TYPEID,B.DESCRIPCION,COUNT(DISTINCT A.AUTH) AS CANTIDAD,SUM(A.AMOUNT) AS TOTAL
            FROM dbInventario.dbo.tblGndTndr A
            INNER JOIN dbInventario.dbo.tblParametrizacionContable B ON B.formapagoid = A.TYPEID
            WHERE A.DATE= :fecha
            AND A.TYPE=1
            AND A.TYPEID <> 1 AND A.[CHECK]/10000 NOT IN (:cafeteriaCentro, :cafeteriaDosquebradas)
            GROUP BY A.TYPEID,B.DESCRIPCION
            ORDER BY B.DESCRIPCION";

            $params = array(
                "fecha"=>$fecha,
                "cafeteriaCentro"=> Ambiente::CAFETERIACENTRO,
                "cafeteriaDosquebradas"=> Ambiente::CAFETERIADOSQUEBRADAS
            );
        }elseif($centroAtencion == '2'){
            $query = "SELECT
            A.TYPEID,B.DESCRIPCION,COUNT(DISTINCT A.AUTH) AS CANTIDAD,SUM(A.AMOUNT) AS TOTAL
            FROM dbInventario.dbo.tblGndTndr A
            INNER JOIN dbInventario.dbo.tblParametrizacionContable B ON B.formapagoid = A.TYPEID
            WHERE A.DATE= :fecha
            AND A.TYPE=1
            AND A.TYPEID <> 1 AND A.[CHECK]/10000 = :cafeteriaCentro
            GROUP BY A.TYPEID,B.DESCRIPCION
            ORDER BY B.DESCRIPCION";

            $params = array(
                "fecha"=>$fecha,
                "cafeteriaCentro"=> Ambiente::CAFETERIACENTRO
            );
        }else{
            $query = "SELECT
            A.TYPEID,B.DESCRIPCION,COUNT(DISTINCT A.AUTH) AS CANTIDAD,SUM(A.AMOUNT) AS TOTAL
            FROM dbInventario.dbo.tblGndTndr A
            INNER JOIN dbInventario.dbo.tblParametrizacionContable B ON B.formapagoid = A.TYPEID
            WHERE A.DATE= :fecha
            AND A.TYPE=1
            AND A.TYPEID <> 1 AND A.[CHECK]/10000 = :cafeteriaDosquebradas
            GROUP BY A.TYPEID,B.DESCRIPCION
            ORDER BY B.DESCRIPCION";

            $params = array(
                "fecha"=>$fecha,
                "cafeteriaDosquebradas"=> Ambiente::CAFETERIADOSQUEBRADAS
            );
        }

        $stmt = $em->prepare($query);

        $stmt->execute($params);
        $resultados = $stmt->fetchAll();

        return $resultados; 
    }

    public function ReporteProductosVendidos($desde,$hasta)
    {   
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT CAST(YEAR(A.DOB) AS VARCHAR) + RIGHT('0' + CAST(MONTH(A.DOB) AS VARCHAR(2)),2) + RIGHT('0' + CAST(DAY(A.DOB) AS VARCHAR(2)),2) AS FECHA,
        (D.FIRSTNAME + ' ' + D.LASTNAME) AS CAJERO,
		C.Name,A.ITEM,B.LONGNAME,
		CASE 
			WHEN A.TYPE = 0 
				THEN COUNT(A.ITEM)
			WHEN A.TYPE = 1
				THEN COUNT(A.ITEM)*(-1)
		END AS CANTIDAD, E.Desctax AS IMPUESTO,
		SUM(A.DISCPRIC) AS TOTAL
        FROM dbInventario.dbo.tblGndItem A
        INNER JOIN dbInventario.dbo.tblItem B ON ( B.ID = A.ITEM AND B.TAXID=A.TAXID)
        INNER JOIN dbInventario.dbo.tblTrm C ON ( C.Id = A.TERMID)
        INNER JOIN dbInventario.dbo.tblEmpleados D ON ( D.Id = A.EMPLOYEE)
        INNER JOIN dbInventario.dbo.tblTax E ON ( E.IdTax = A.TAXID)
        WHERE A.dob BETWEEN :desde AND :hasta
        GROUP BY A.dob,D.FIRSTNAME,D.LASTNAME,C.Name,A.ITEM,B.LONGNAME,A.TYPE, E.Desctax";

            $stmt = $em->prepare($query);

            $params = array(
                "desde"=>$desde,
                "hasta"=>$hasta
            );

            $stmt->execute($params);
            return  $result = $stmt->fetchAll();    
    }

    public function ReporteCierresconDiferencia($desde,$hasta,$tipo)
    {
        $em = $this->getEntityManager();
        $ccajero_repo= $em->getRepository("AppBundle:Cierre");

        $qb = $ccajero_repo->createQueryBuilder('c');

        if($tipo == 0){
            $qb->where('c.fecha BETWEEN :desde AND :hasta AND c.diferencia <> 0 and c.motivo =1 ')
            ->setParameter('desde',$desde)
            ->setParameter('hasta',$hasta);
        }
        if($tipo == 1){
            $qb->where('c.fecha BETWEEN :desde AND :hasta AND c.diferencia < 0 and c.motivo =1 ')
            ->setParameter('desde',$desde)
            ->setParameter('hasta',$hasta);
        }
        if($tipo == 2){
            $qb->where('c.fecha BETWEEN :desde AND :hasta AND c.diferencia > 0 and c.motivo =1 ')
            ->setParameter('desde',$desde)
            ->setParameter('hasta',$hasta);
        }

        return $qb->getQuery()
                ->getResult();

    }

    public function ReporteReembolsos($desde,$hasta)
    {   
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT CAST(YEAR(A.DOB) AS VARCHAR) + RIGHT('0' + CAST(MONTH(A.DOB) AS VARCHAR(2)),2) + RIGHT('0' + CAST(DAY(A.DOB) AS VARCHAR(2)),2) AS FECHA,
        (D.FIRSTNAME + ' ' + D.LASTNAME) AS CAJERO,C.Name,[CHECK],A.ITEM,B.LONGNAME,A.DISCPRIC AS VALOR,A.SYSDATE
        FROM dbInventario.dbo.tblGndItem A
        INNER JOIN dbInventario.dbo.tblItem B ON ( B.ID = A.ITEM)
        INNER JOIN dbInventario.dbo.tblTrm C ON ( C.Id = A.TERMID)
        INNER JOIN dbInventario.dbo.tblEmpleados D ON ( D.Id = A.EMPLOYEE)
        WHERE A.dob BETWEEN :desde AND :hasta AND TYPE=1
        GROUP BY A.dob,D.FIRSTNAME,D.LASTNAME,C.Name,[CHECK],A.ITEM,B.LONGNAME,A.DISCPRIC,A.SYSDATE";

            $stmt = $em->prepare($query);

            $params = array(
                "desde"=>$desde,
                "hasta"=>$hasta
            );

            $stmt->execute($params);
            return  $result = $stmt->fetchAll();    
    }

    public function getEfectivoRealporEmpleado($fecha,$empleado)
    {
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT SUM(AMOUNT)
        FROM [dbInventario].[dbo].[tblGndSale]
        WHERE dob= :fecha AND EMPLOYEE= :empleado AND TYPE='4' AND TYPEID='1' ";
    

        $stmt = $em->prepare($query);

        $params = array(
            "fecha"=>$fecha,
            "empleado"=>$empleado
        );

        $stmt->execute($params);
        $result = $stmt->fetch();

        foreach( $result as $resultado){
            if($resultado != null){
                $valor = $resultado;
            }else{
                $valor = 0;
            }
        }
        return $valor;
    }

    public function ReporteProductosVendidosConsolidado($desde,$hasta)
    {   
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT 
		CAST(YEAR(A.DOB) AS VARCHAR) + RIGHT('0' + CAST(MONTH(A.DOB) AS VARCHAR(2)),2) + RIGHT('0' + CAST(DAY(A.DOB) AS VARCHAR(2)),2) AS Fecha,
        C.Name AS Punto,A.ITEM AS Producto,A.PARENT AS Padre,A.ORIGIN AS Modificador,D.LONGNAME AS Descripcion ,
		COUNT(A.ITEM) AS CANTIDAD,
		SUM(A.DISCPRIC) AS TOTAL,
		F.idCategoria AS CATEGORIA,
        C.Id AS Terminal
        FROM dbInventario.dbo.tblGndItem A
        INNER JOIN dbInventario.dbo.tblTrm C ON ( C.Id = A.TERMID)
        INNER JOIN dbInventario.dbo.tblItem D ON ( D.Id = A.Item)
		LEFT JOIN dbInventario.dbo.tblCategoria F ON ( F.IdCategoria = A.category)
        WHERE A.dob BETWEEN :desde AND :hasta AND A.CATEGORY NOT IN (1,2,3) AND A.PARENT = 0
        GROUP BY A.dob,C.Name,A.ITEM,A.PARENT,A.ORIGIN,A.TYPE,D.LONGNAME,F.idCategoria,C.Id";

            $stmt = $em->prepare($query);

            $params = array(
                "desde"=>$desde,
                "hasta"=>$hasta
            );

            $stmt->execute($params);
            $result = $stmt->fetchAll();
            
            $resultado = $this->filtros($result);

            return $resultado;
    }

    public function getChildren($fecha,$punto,$producto){

        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT 
        A.ORIGIN AS modificador,A.Item AS producto,D.LONGNAME as descripcion,
        COUNT(A.ITEM) AS CANTIDAD,
        SUM(A.DISCPRIC) AS TOTAL,
        F.IDCATEGORIA AS CATEGORIA
        FROM dbInventario.dbo.tblGndItem A
        INNER JOIN dbInventario.dbo.tblTrm C ON ( C.Id = A.TERMID)
        INNER JOIN dbInventario.dbo.tblItem D ON ( D.Id = A.Item)
        LEFT JOIN dbInventario.dbo.tblCategoria F ON ( F.IdCategoria = A.CATEGORY)
        WHERE A.dob = :fecha AND C.ID= :terminal AND A.Parent = :padre
        GROUP BY A.ORIGIN,A.Item,A.type,D.LONGNAME,F.IDCATEGORIA";

            $stmt = $em->prepare($query);

            $params = array(
                "fecha"=>$fecha,
                "terminal"=>$punto,
                "padre" => $producto
            );

            $stmt->execute($params);
            $result = $stmt->fetchAll();
            
            return $result;
    }

    private function filtros($array){
        $new = array();
        foreach($array as $valor){
            $hijos = $this->getChildren($valor["Fecha"],$valor["Terminal"],$valor["Producto"]);
            if(count($hijos) > 0) {
                $children = $valor["Terminal"];
            }else{
                $children = 0;
            }
            
            $new[] = array(
                "fecha" => $valor["Fecha"],
                "punto" => $valor["Punto"],
                "producto"=>$valor["Producto"],
                "descripcion" => $valor["Descripcion"],
                "cantidad" => $valor["CANTIDAD"],
                "total" => $valor["TOTAL"]*1,
                "hijos" => $children
            );
        }
        return $new;
    }

    public function getNameModificador($codigo){
        if($codigo == '10000'){
            $name = 'Principios';
        }
        if($codigo == '10001'){
            $name = 'Carnes';
        }
        if($codigo == '10002'){
            $name = 'Ensaladas';
        }
        if($codigo == '10003'){
            $name = 'Sopas';
        }
        if($codigo == '10004'){
            $name = 'Arroz';
        }
        if($codigo == '10005'){
            $name = 'Pescado';
        }
        if($codigo == '10006'){
            $name = 'Pescado Empleado';
        }
        if($codigo == '10007'){
            $name = 'Ensalada Lagos';
        }
        if($codigo == '10008'){
            $name = 'Pescado Torneo';
        }

        return $name;
    }

    public function ReporteVoucherSubsidioEnEspecie($desde,$hasta)
    {   
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT A.DOB AS FECHA,(C.FIRSTNAME + ' ' + C.LASTNAME) AS CAJERO,B.Name as PUNTO,E.descripcion AS FP,SUM(A.amount) AS TOTAL,F.AUTH AS VOUCHER
        FROM dbInventario.dbo.tblGndSale AS A
        INNER JOIN dbInventario.dbo.tblTrm B ON ( B.Id = A.[CHECK]/10000 )
        INNER JOIN dbInventario.dbo.tblEmpleados  C ON (C.Id = A.EMPLOYEE)
        INNER JOIN dbInventario.dbo.tblParametrizacionContable  E ON (E.formaPagoId = A.TypeId)
		LEFT JOIN dbInventario.dbo.tblGndTndr AS F ON (F.[CHECK] = A.[CHECK] AND F.TYPEID=A.TYPEID AND A.DOB=F.DATE)
        WHERE A.dob BETWEEN :desde AND :hasta AND A.TYPE=4 AND A.TYPEID NOT IN (1)  AND F.TYPE=1 
        GROUP BY A.DOB,C.FIRSTNAME,C.LASTNAME,B.Name,E.descripcion,F.AUTH";

            $stmt = $em->prepare($query);

            $params = array(
                "desde"=>$desde,
                "hasta"=>$hasta
            );

            $stmt->execute($params);
            return $stmt->fetchAll();    
    }

    public function getEfectivoByCentroAtencionAndFecha($fecha,$centro)
    {   
        if($centro == 1){
            $IN = " NOT IN (".Ambiente::RECEPCIONCONSOTA . "," . Ambiente::RECEPCIONMODULO .",". Ambiente::CAFETERIACENTRO. ",". Ambiente::CAFETERIADOSQUEBRADAS. ")";
        }elseif($centro == 2){
            $IN = " IN (". Ambiente::CAFETERIACENTRO .")";
        }else{
            $IN = " IN (". Ambiente::CAFETERIADOSQUEBRADAS .")";
        }
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT B.name_user,B.documento,C.Name,
                    SUM(A.amount)  AS real ,
                    B.digitado,B.diferencia,A.[CHECK]/10000 AS terminal,A.EMPLOYEE,B.observacion
                    FROM dbInventario.dbo.tblGndSale AS A
                    LEFT JOIN dbInventario.dbo.cierres B ON (B.empleado_id = A.EMPLOYEE  AND B.fecha = A.dob and B.terminal_id = A.[CHECK]/10000 
                    AND B.terminal_id $IN AND B.motivo_id=1)
                    LEFT JOIN dbInventario.dbo.tblTrm C ON ( C.Id = B.terminal_id)
                    WHERE  A.TYPE=:tipo AND A.TYPEID=:typeid AND A.DOB=:fecha  AND A.[CHECK]/10000 $IN AND A.EMPLOYEE=A.TIPEMP
                    GROUP BY B.name_user,B.documento,C.Name,B.digitado,B.diferencia,A.[CHECK]/10000,A.EMPLOYEE,B.observacion
                    ORDER BY C.Name
        ";

            $stmt = $em->prepare($query);

            $params = array(
                "fecha"=>$fecha,
                "tipo" => 4,
                "typeid"=>1
            );

            $stmt->execute($params);
            $result = $stmt->fetchAll();   

            if($centro == 1){
                $reporteEfectivoRecepcionesArray = $this->ReporteDetalleFormadePagoEfectivoRecepciones($fecha);
                $respuesta = array_merge($result,$reporteEfectivoRecepcionesArray);
            }else{
                $respuesta = $result;
            }

            return $respuesta;
    }

    public function listarVoucherSubsidioEnEspecieTblGndTndr($desde,$hasta){
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT
        EMPLOYEE,AUTH,[CHECK],DATE,AMOUNT,(b.FIRSTNAME + ' ' + b.LASTNAME) AS NOMBRE, b.nickname, a.id
        FROM [dbInventario].[dbo].tblGndTndr a 
        JOIN [dbInventario].[dbo].tblEmpleados b on b.id = a.employee
        WHERE 1=1
        AND TYPE = 1
        AND TYPEID = 18
        AND DATE >= :desde AND DATE <= :hasta
        ORDER BY AUTH ASC";

        $stmt = $em->prepare($query);

        $params = array(
            "desde"=>$desde,
            "hasta"=>$hasta
        );

        $stmt->execute($params);
        $resultados = $stmt->fetchAll();   

        $valores = array();
        if(!empty($resultados)){
            foreach($resultados as $resultado){
                $valores[$resultado["AUTH"]][] = $resultado; 
            }

        }

        return $valores;
        
    }

    public function existeVoucherTblGndTndrByAuth($voucher){
        $em = $this->getEntityManager()->getConnection();

        $query = "SELECT
        EMPLOYEE,AUTH,[CHECK] AS CUENTA,DATE,AMOUNT,(b.FIRSTNAME + ' ' + b.LASTNAME) AS NOMBRE, b.nickname
        FROM [dbInventario].[dbo].tblGndTndr a 
        JOIN [dbInventario].[dbo].tblEmpleados b on b.id = a.employee
        WHERE 1=1
        AND TYPE = 1
        AND TYPEID = 18
        AND a.AUTH = :voucher
        ORDER BY AUTH ASC";

        $stmt = $em->prepare($query);

        $params = array(
            "voucher"=>$voucher
        );

        $stmt->execute($params);
        return $resultados = $stmt->fetchAll();   
        
    }
}
